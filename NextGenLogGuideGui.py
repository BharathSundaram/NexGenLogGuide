# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'NextGenLogGuide.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.

import os
from setup_logger import logger
from PyQt5 import QtCore, QtGui
from PyQt5.QtWidgets import QFileDialog, QAction, QTreeWidgetItem
from PyQt5.QtGui import QIcon
from utils import *
from PyQt5.QtCore import QThreadPool

__filename__ = "NextGenLogGuideGui.py"
__author__ = "Bharath Shanmugasundaram"
__version__ = "1.0.0"

class Ui_MainWindow(object):
      
    def setupUi(self, MainWindow):
        MainWindow.setObjectName("MainWindow")
        width,height = get_screen_resolution()
        MainWindow.resize(width-5, int(height - (height*(15/100))))# 90 % of screen height
        self.centralwidget = QtWidgets.QWidget(MainWindow)
        self.centralwidget.setObjectName("centralwidget")
        self.gridLayout_2 = QtWidgets.QGridLayout(self.centralwidget)
        self.gridLayout_2.setObjectName("gridLayout_2")
        self.verticalLayout = QtWidgets.QVBoxLayout()
        self.verticalLayout.setObjectName("verticalLayout")
        self.label = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label.setFont(font)
        self.label.setObjectName("label")
        self.verticalLayout.addWidget(self.label)
        self.treeWidget = QtWidgets.QTreeWidget(self.centralwidget)
        sizePolicy = QtWidgets.QSizePolicy(QtWidgets.QSizePolicy.Fixed, QtWidgets.QSizePolicy.Expanding)
        sizePolicy.setHorizontalStretch(0)
        sizePolicy.setVerticalStretch(0)
        sizePolicy.setHeightForWidth(self.treeWidget.sizePolicy().hasHeightForWidth())
        self.treeWidget.setSizePolicy(sizePolicy)
        self.treeWidget.setObjectName("treeWidget")
        #self.treeWidget.headerItem().setText(0, "1")
        self.verticalLayout.addWidget(self.treeWidget)
        self.gridLayout_2.addLayout(self.verticalLayout, 0, 0, 1, 1)
        self.verticalLayout_2 = QtWidgets.QVBoxLayout()
        self.verticalLayout_2.setObjectName("verticalLayout_2")
        self.label_2 = QtWidgets.QLabel(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(12)
        font.setBold(False)
        font.setUnderline(True)
        font.setWeight(50)
        self.label_2.setFont(font)
        self.label_2.setObjectName("label_2")
        self.verticalLayout_2.addWidget(self.label_2)
        self.textBrowser = QtWidgets.QTextBrowser(self.centralwidget)
        self.textBrowser.setObjectName("textBrowser")
        self.verticalLayout_2.addWidget(self.textBrowser)
        self.gridLayout_2.addLayout(self.verticalLayout_2, 0, 1, 1, 1)
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.pushButton = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.pushButton.setFont(font)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 0, 0, 1, 1)
        self.pushButton_2 = QtWidgets.QPushButton(self.centralwidget)
        font = QtGui.QFont()
        font.setFamily("Arial")
        font.setPointSize(9)
        self.pushButton_2.setFont(font)
        self.pushButton_2.setObjectName("pushButton_2")
        self.gridLayout.addWidget(self.pushButton_2, 0, 1, 1, 1)
        self.lineEdit = QtWidgets.QLineEdit(self.centralwidget)
        self.lineEdit.setObjectName("lineEdit")
        self.gridLayout.addWidget(self.lineEdit, 0, 2, 1, 1)
        self.gridLayout_2.addLayout(self.gridLayout, 1, 0, 1, 2)
        MainWindow.setCentralWidget(self.centralwidget)
        self.menubar = QtWidgets.QMenuBar(MainWindow)
        self.menubar.setGeometry(QtCore.QRect(0, 0, 807, 21))
        self.menubar.setObjectName("menubar")
        self.menuOpenfile = QtWidgets.QMenu(self.menubar)
        self.menuOpenfile.setObjectName("menuOpenfile")
        self.menuHelp = QtWidgets.QMenu(self.menubar)
        self.menuHelp.setObjectName("menuHelp")
        self.menuOptions = QtWidgets.QMenu(self.menubar)
        self.menuOptions.setObjectName("menuOptions")
        MainWindow.setMenuBar(self.menubar)
        self.statusbar = QtWidgets.QStatusBar(MainWindow)
        self.statusbar.setObjectName("statusbar")
        MainWindow.setStatusBar(self.statusbar)
        self.actionOpenFile = QtWidgets.QAction(MainWindow)
        self.actionOpenFile.setObjectName("actionOpenFile")
        self.actionOpenFolder = QtWidgets.QAction(MainWindow)
        self.actionOpenFolder.setObjectName("actionOpenFolder")
        self.actionAbout = QtWidgets.QAction(MainWindow)
        self.actionAbout.setObjectName("actionAbout")
        self.actionFull_GCC_Graph = QtWidgets.QAction(MainWindow)
        self.actionFull_GCC_Graph.setObjectName("actionFull_GCC_Graph")
        self.actionParse_Log = QtWidgets.QAction(MainWindow)
        self.actionParse_Log.setObjectName("actionParse_Log")
        self.actionRecentFiles = QtWidgets.QAction(MainWindow)
        self.actionRecentFiles.setObjectName("actionRecentFiles")
        self.actionSaveReport = QtWidgets.QAction(MainWindow)
        self.actionSaveReport.setObjectName("actionSaveReport")
        self.actionQuit = QtWidgets.QAction(MainWindow)
        self.actionQuit.setObjectName("actionQuit")
        self.menuOpenfile.addAction(self.actionOpenFile)
        self.menuOpenfile.addAction(self.actionOpenFolder)
        self.menuOpenfile.addAction(self.actionSaveReport)
        self.menuOpenfile.addSeparator()
        self.menuOpenfile.addAction(self.actionRecentFiles)
        self.menuOpenfile.addAction(self.actionQuit)
        self.menuHelp.addAction(self.actionAbout)
        self.menuOptions.addAction(self.actionFull_GCC_Graph)
        self.menuOptions.addAction(self.actionParse_Log)
        self.menubar.addAction(self.menuOpenfile.menuAction())
        self.menubar.addAction(self.menuOptions.menuAction())
        self.menubar.addAction(self.menuHelp.menuAction())
        
        self.retranslateUi(MainWindow)
        QtCore.QMetaObject.connectSlotsByName(MainWindow)
        logger.debug(__filename__,"setup called")

    def retranslateUi(self, MainWindow):
        _translate = QtCore.QCoreApplication.translate
        MainWindow.setWindowTitle(_translate("MainWindow", str ( 'NexGenLogGuide ' +'-' + __version__)))
        self.label.setText(_translate("MainWindow", "List of files"))
        self.label_2.setText(_translate("MainWindow", "Initial log information"))
        self.pushButton.setText(_translate("MainWindow", "Open File"))
        self.pushButton_2.setText(_translate("MainWindow", "Open Folder"))
        self.menuOpenfile.setTitle(_translate("MainWindow", "File"))
        self.menuHelp.setTitle(_translate("MainWindow", "Help"))
        self.menuOptions.setTitle(_translate("MainWindow", "Options"))
        self.actionOpenFile.setText(_translate("MainWindow", "OpenFile"))
        self.actionOpenFolder.setText(_translate("MainWindow", "OpenFolder"))
        self.actionAbout.setText(_translate("MainWindow", "About"))
        self.actionFull_GCC_Graph.setText(_translate("MainWindow", "Full GCC Graph"))
        self.actionParse_Log.setText(_translate("MainWindow", "Parse Log"))
        self.actionRecentFiles.setText(_translate("MainWindow", "RecentFiles"))
        self.actionSaveReport.setText(_translate("MainWindow", "SaveReport"))
        self.actionQuit.setText(_translate("MainWindow", "Quit"))

        # Till this it was generated by pyuic5.exe

        MainWindow.statusBar().showMessage('Ready')
        self.lineEdit.setReadOnly(True)
        self.actionOpenFile.setToolTip('Open NexGen Log File for parsing')
        self.actionOpenFolder.setToolTip('Open folder contains Log File(s) for parsing')
        self.pushButton.setToolTip('Open NexGen Log File for parsing')
        self.menuOpenfile.setToolTipsVisible(True)
        self.pushButton_2.setToolTip('Open folder contains Log File(s) for parsing')

        self.treeWidget.setColumnCount(2)
        self.treeWidget.setHeaderLabels(["S.No","File Name", "Size"])
        #twidth = self.treeWidget.sizeHint().width() - int((self.treeWidget.sizeHint().width() / 3))
        twidth = self.treeWidget.sizeHint().width()

        self.treeWidget.header().resizeSection(0,int(twidth*.10))
        self.treeWidget.header().resizeSection(1,int(twidth*.60))
        self.treeWidget.header().resizeSection(2,int(twidth*.30))
        self.treeWidget.header().setStretchLastSection(False)
        self.treeWidget.header().setSectionResizeMode(0, QtWidgets.QHeaderView.Stretch)
        bfont = self.textBrowser.font()
        bfont.setFamily('Courier New')
        bfont.setPointSizeF(10)
        self.textBrowser.setFont(bfont)

        self.read_config_file('LogConfig.json')
        if (self.status == True):
             self.regex =  get_regex_from_list(self.onliner)
        else:
            logger.error(__file__,'Failed to read regex')
            MainWindow.statusBar().showMessage('Error reading LogConfig.json. Please check')

        self.threadpool = QThreadPool()
        logger.info("Available with maximum %d threads" % self.threadpool.maxThreadCount())

    def OpenFileDialog(self):
        try :
            file_name, filter = QFileDialog.getOpenFileName(None, 'Open NextGen Log files',
                                'c:\\', "NextGen Log files (*.log)")
            
            logger.debug(__filename__,'file name :',file_name)
            path, filename = os.path.split(file_name)
            self.lineEdit.setText(file_name)
            fsize = os.path.getsize(file_name)
            fsizestr = str(int(fsize/1024)) + ' KB'
            self.treeWidget.clear()
            QTreeWidgetItem(self.treeWidget, ['1',filename, fsizestr])
            self.create_thread([file_name],[])
        except FileNotFoundError:
            logger.debug(__filename__,'No file selected')

    def OpenFolderDialog(self,MainWindow):
        try :
            folder_name = str(QFileDialog.getExistingDirectory(None, "Select NextGenLog Directory"))
            logger.debug(__filename__,folder_name)
            self.lineEdit.setText(folder_name)
            if folder_name =='':
                return

            MainWindow.statusBar().showMessage('Fetching file from folder. Please wait...')
            files_list = get_files_from_dir(folder_name,".log")
            self.treeWidget.clear()
            count = 0
            for file in files_list:
                fsize = os.path.getsize(file)
                fsizestr = str(int(fsize/1024)) + ' KB'
                path, filename = os.path.split(file)
                count = count + 1
                QTreeWidgetItem(self.treeWidget, [str(count),filename, fsizestr])
            MainWindow.statusBar().showMessage(f"Fetching file from folder completed. Total file(s): {len(files_list)}")
            self.create_thread(files_list,[])
        except FileNotFoundError:
            logger.debug(__filename__,'No folder selected')

    def add_signals(self,MainWindow):
        self.pushButton.clicked.connect(self.OpenFileDialog)
        self.pushButton_2.clicked.connect(lambda: self.OpenFolderDialog(MainWindow))
        self.actionOpenFile.triggered.connect(self.OpenFileDialog)
        self.actionOpenFolder.triggered.connect(lambda: self.OpenFolderDialog(MainWindow))

    def process_log_files(self, file_list, log_info_list):
        for file in file_list:
            logger.info(file)
            filecontent = extract_onliner_info(self.regex,file)
            self.textBrowser.append(file)
            self.textBrowser.append('='*len(file))
            if(filecontent is not None):
                for item in filecontent: 
                    self.textBrowser.append(item)
            else:
                self.textBrowser.append("<font color=red size=9>No data available to present for this file</font>")
            
            self.textBrowser.append("************END OF FILE**********\n")

    def read_config_file(self,filename):
        self.status, self.onliner, self.settings = ReadConfigfromJson(filename)
        logger.info(self.status, self.onliner, self.settings)

    def thread_complete(self):
        print("THREAD COMPLETE!")

    def create_thread(self,file_list, log_info_list):
        # Pass the function to execute
        worker = JobThread(self.process_log_files,file_list,log_info_list)
        worker.signals.finished.connect(self.thread_complete)
        
        # Execute
        self.threadpool.start(worker) 
        logger.info("Thread created for processing files")

