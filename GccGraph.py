# -*- coding: utf-8 -*-

# Form implementation generated from reading ui file 'today.ui'
#
# Created by: PyQt5 UI code generator 5.15.0
#
# WARNING: Any manual changes made to this file will be lost when pyuic5 is
# run again.  Do not edit this file unless you know what you are doing.


from PyQt5 import QtCore, QtGui, QtWidgets
from PyQt5.QtCore import Qt
import traceback
from setup_logger import logger

__filename__ = "GccGraph"

class Ui_GccGraph(object):

    def __init__ (self,fname):
        self.fname = fname

    def setupUi(self, Dialog):
        Dialog.setObjectName("Dialog")
        Dialog.resize(719, 538)
        self.verticalLayout = QtWidgets.QVBoxLayout(Dialog)
        self.verticalLayout.setObjectName("verticalLayout")
        self.gridLayout = QtWidgets.QGridLayout()
        self.gridLayout.setObjectName("gridLayout")
        self.bquit = QtWidgets.QPushButton(Dialog)
        self.bquit.setObjectName("bquit")
        self.gridLayout.addWidget(self.bquit, 1, 1, 1, 1)
        self.pushButton = QtWidgets.QPushButton(Dialog)
        self.pushButton.setObjectName("pushButton")
        self.gridLayout.addWidget(self.pushButton, 1, 0, 1, 1)
        self.graphicsView = QtWidgets.QGraphicsView(Dialog)
        self.graphicsView.setObjectName("graphicsView")
        self.gridLayout.addWidget(self.graphicsView, 0, 0, 1, 2)
        self.progressBar = QtWidgets.QProgressBar(Dialog)
        self.progressBar.setProperty("value", 0)
        self.progressBar.setObjectName("progressBar")
        self.gridLayout.addWidget(self.progressBar, 2, 0, 1, 2)
        self.verticalLayout.addLayout(self.gridLayout)
        self.pushButton.setText("Save as Image")
        self.bquit.setText("Quit")
        Dialog.setWindowFlag(Qt.WindowMinimizeButtonHint, True)
        Dialog.setWindowFlag(Qt.WindowMaximizeButtonHint, True)
        Dialog.setWindowTitle("FullGccGraph: {}".format(self.fname))
        self.progressBar.setMaximum(1)
        self.bquit.clicked.connect(Dialog.accept)
        Dialog.show()
        

    def show_data(self,d_tuple):
        print(d_tuple)

    def show_error(self,d_tuple):
        print(d_tuple)
        logger.error(__filename__,d_tuple)



    def get_Gcc_values(self, filename,fn_send_data):
        print('get_Gcc_values Thread started {}'.format(filename))
        with open(filename) as fp:
            line = fp.readline()
            cnt = 0
            chc = 0
            freemem_ls = []
            freemem_index = []
            val = 0
            valinMb = 0
            while line:
                if (line.find('com.mca.memoryprofiling - JAVA HEAP USAGE: MAX: ') != -1): 
                    val = int(line.split(': ')[6].split(',')[0])
                    valinMb =int(val/1024/1024);
                if (line.find('WARNING HIGH MEMORY USAGES CHECK OF') != -1): 
                    break
                line = fp.readline()

            while line:
                if ((line.find('com.mca.memoryprofiling - JAVA HEAP USAGE: MAX: ') != -1)):
                    #print(line) 
                    valx = int(line.split(': ')[6].split(',')[0])
                    valinMbx =int(valx/1024/1024);
                    timeval = line.split(' ')[0].split(':')
                    if(True == str(timeval[0]).isdigit()):
                        newtimeinsecs = int(timeval[0]) * 60 + int(timeval[1].split('.')[0])
                        newtimeinsecs = int(newtimeinsecs/60);
                        #print(timeval,newtimeinsecs)
                        freemem_ls.append(valinMbx)
                        freemem_index.append(newtimeinsecs)
                        cnt += 1
                line = fp.readline()

        print(val,valinMb)
        print(freemem_index)
        print(freemem_ls)

